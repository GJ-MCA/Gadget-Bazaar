Sure! Here's an example of how you can create an HTML form with an input tag for uploading a product image, and how you can handle the image upload on the server using Node.js and Express:

HTML form for uploading product image:

html
Copy code
<form action="/products" method="POST" enctype="multipart/form-data">
  <label for="name">Product name:</label>
  <input type="text" name="name" id="name" required>

  <label for="description">Product description:</label>
  <textarea name="description" id="description" required></textarea>

  <label for="price">Product price:</label>
  <input type="number" name="price" id="price" step="0.01" required>

  <label for="image">Product image:</label>
  <input type="file" name="image" id="image" accept="image/*" required>

  <button type="submit">Save product</button>
</form>
In this form, the enctype attribute is set to multipart/form-data, which is required for uploading files using an HTML form. The name, description, and price fields are required fields for a product, and the image field is an input tag of type file, which allows users to select an image file to upload.

Server-side code for handling the image upload:

javascript
Copy code
const express = require('express');
const multer = require('multer');
const path = require('path');
const fs = require('fs');

const app = express();

// Set up Multer middleware to handle file uploads
const storage = multer.diskStorage({
  destination: function (req, file, cb) {
    cb(null, 'public/images');
  },
  filename: function (req, file, cb) {
    cb(null, `${Date.now()}-${file.originalname}`);
  }
});

const upload = multer({ storage: storage });

// Define a route for handling product creation
app.post('/products', upload.single('image'), (req, res) => {
  const { name, description, price } = req.body;
  const imagePath = path.join('images', req.file.filename);

  // Save the product to the database
  const product = new Product({
    name,
    description,
    price,
    image: imagePath
  });

  product.save((err) => {
    if (err) {
      console.error(err);
      res.status(500).send('Error saving product');
    } else {
      res.redirect('/products');
    }
  });
});
In this example, we're using the multer middleware to handle the file upload. The storage option is set to store the uploaded image in a public/images directory and give the file a unique name by adding the timestamp to the original filename.

In the POST /products route, we use the upload.single('image') method to handle the file upload. The req.file object contains information about the uploaded file, including the file name, original name, and MIME type. We use the path.join() method to create a file path that we can save to the database as the image field for the product.

Once we have the imagePath, we can create a new Product instance and save it to the database, as in the previous example I provided.

I hope this helps! Let me know if you have any further questions.